/*
 * This file is generated by jOOQ.
 */
package com.klichota.jooqdemo.boundary.perstitence.tables;


import com.klichota.jooqdemo.boundary.perstitence.Indexes;
import com.klichota.jooqdemo.boundary.perstitence.Keys;
import com.klichota.jooqdemo.boundary.perstitence.Public;
import com.klichota.jooqdemo.boundary.perstitence.tables.records.LoanRecord;

import java.math.BigDecimal;
import java.sql.Date;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Loan extends TableImpl<LoanRecord> {

    private static final long serialVersionUID = 1705285408;

    /**
     * The reference instance of <code>public.loan</code>
     */
    public static final Loan LOAN = new Loan();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LoanRecord> getRecordType() {
        return LoanRecord.class;
    }

    /**
     * The column <code>public.loan.id</code>.
     */
    public final TableField<LoanRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.loan.status</code>.
     */
    public final TableField<LoanRecord, String> STATUS = createField("status", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.loan.created_at</code>.
     */
    public final TableField<LoanRecord, Timestamp> CREATED_AT = createField("created_at", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>public.loan.date_from</code>.
     */
    public final TableField<LoanRecord, Date> DATE_FROM = createField("date_from", org.jooq.impl.SQLDataType.DATE.nullable(false), this, "");

    /**
     * The column <code>public.loan.date_to</code>.
     */
    public final TableField<LoanRecord, Date> DATE_TO = createField("date_to", org.jooq.impl.SQLDataType.DATE.nullable(false), this, "");

    /**
     * The column <code>public.loan.amount</code>.
     */
    public final TableField<LoanRecord, BigDecimal> AMOUNT = createField("amount", org.jooq.impl.SQLDataType.NUMERIC.nullable(false), this, "");

    /**
     * The column <code>public.loan.cost</code>.
     */
    public final TableField<LoanRecord, BigDecimal> COST = createField("cost", org.jooq.impl.SQLDataType.NUMERIC.nullable(false), this, "");

    /**
     * The column <code>public.loan.proposal_id</code>.
     */
    public final TableField<LoanRecord, Long> PROPOSAL_ID = createField("proposal_id", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * Create a <code>public.loan</code> table reference
     */
    public Loan() {
        this(DSL.name("loan"), null);
    }

    /**
     * Create an aliased <code>public.loan</code> table reference
     */
    public Loan(String alias) {
        this(DSL.name(alias), LOAN);
    }

    /**
     * Create an aliased <code>public.loan</code> table reference
     */
    public Loan(Name alias) {
        this(alias, LOAN);
    }

    private Loan(Name alias, Table<LoanRecord> aliased) {
        this(alias, aliased, null);
    }

    private Loan(Name alias, Table<LoanRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Loan(Table<O> child, ForeignKey<O, LoanRecord> key) {
        super(child, key, LOAN);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PK_LOAN);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<LoanRecord> getPrimaryKey() {
        return Keys.PK_LOAN;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<LoanRecord>> getKeys() {
        return Arrays.<UniqueKey<LoanRecord>>asList(Keys.PK_LOAN);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<LoanRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<LoanRecord, ?>>asList(Keys.LOAN__FK_LOAN_PROPOSAL);
    }

    public Proposal proposal() {
        return new Proposal(this, Keys.LOAN__FK_LOAN_PROPOSAL);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Loan as(String alias) {
        return new Loan(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Loan as(Name alias) {
        return new Loan(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Loan rename(String name) {
        return new Loan(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Loan rename(Name name) {
        return new Loan(name, null);
    }
}
