/*
 * This file is generated by jOOQ.
 */
package com.klichota.jooqdemo.boundary.perstitence.tables;


import com.klichota.jooqdemo.boundary.perstitence.Indexes;
import com.klichota.jooqdemo.boundary.perstitence.Keys;
import com.klichota.jooqdemo.boundary.perstitence.Public;
import com.klichota.jooqdemo.boundary.perstitence.tables.records.ProposalRecord;

import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Proposal extends TableImpl<ProposalRecord> {

    private static final long serialVersionUID = 822436320;

    /**
     * The reference instance of <code>public.proposal</code>
     */
    public static final Proposal PROPOSAL = new Proposal();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProposalRecord> getRecordType() {
        return ProposalRecord.class;
    }

    /**
     * The column <code>public.proposal.id</code>.
     */
    public final TableField<ProposalRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.proposal.status</code>.
     */
    public final TableField<ProposalRecord, String> STATUS = createField("status", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.proposal.term</code>.
     */
    public final TableField<ProposalRecord, Long> TERM = createField("term", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.proposal.amount</code>.
     */
    public final TableField<ProposalRecord, BigDecimal> AMOUNT = createField("amount", org.jooq.impl.SQLDataType.NUMERIC.nullable(false), this, "");

    /**
     * The column <code>public.proposal.created_at</code>.
     */
    public final TableField<ProposalRecord, Timestamp> CREATED_AT = createField("created_at", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * Create a <code>public.proposal</code> table reference
     */
    public Proposal() {
        this(DSL.name("proposal"), null);
    }

    /**
     * Create an aliased <code>public.proposal</code> table reference
     */
    public Proposal(String alias) {
        this(DSL.name(alias), PROPOSAL);
    }

    /**
     * Create an aliased <code>public.proposal</code> table reference
     */
    public Proposal(Name alias) {
        this(alias, PROPOSAL);
    }

    private Proposal(Name alias, Table<ProposalRecord> aliased) {
        this(alias, aliased, null);
    }

    private Proposal(Name alias, Table<ProposalRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Proposal(Table<O> child, ForeignKey<O, ProposalRecord> key) {
        super(child, key, PROPOSAL);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PK_PROPOSAL);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ProposalRecord> getPrimaryKey() {
        return Keys.PK_PROPOSAL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ProposalRecord>> getKeys() {
        return Arrays.<UniqueKey<ProposalRecord>>asList(Keys.PK_PROPOSAL);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Proposal as(String alias) {
        return new Proposal(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Proposal as(Name alias) {
        return new Proposal(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Proposal rename(String name) {
        return new Proposal(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Proposal rename(Name name) {
        return new Proposal(name, null);
    }
}
